[{"content":"I build maze solving game using Pygame: Check it out\nWhat Technologies I used Python (Programming Language) Pytest (Unit testing) Pygame (Visualization \u0026amp; Keyboard Events) Pygbag (Python to wasm tool for Web Distribution) Github Pages (Hosting) Github Action (CI pipeline) Github (Version Tracking) How did I build It Codebase Github Repo\nDesign The game is built using the MVC (Model-View-Controller) architecture and is based on Wesley Werner\u0026rsquo;s repository. I highly recommend checking out his repository for better understanding.\nImportant Files main.py: Entry point for the game application src : Containing all of the python source code logger.py: Defines the logger of the game event.py: Defines different type of event in the game environment model.py: Defines the Game Engine of game view.py: Defines the Visual of the game maze_game: Contains the logic and maze generation code. maze_visualization: Contains helper function for game visuals test: Contains the test written for the game Maze Generation I used the Randomized Prim\u0026rsquo;s algorithm for generating the maze, which is a popular choice for maze generation. I followed Orestis Zekai\u0026rsquo;s article on maze generation using Python, which was helpful for the basic setup. However, I had some difficulty following the final parts of the article, so I implemented my own version. You can find the final version of my implementation in this file on Github.\nMaze Board Value Enum The MazeGameObject enum improves the readability of the code and creates a layer of abstraction between the values on the game board and the maze generation code.\nclass MazeGameObject(Enum): PATH = 0 WALL = 1 GOAL = 2 EMPTY = -1 PLAYER_TILE = 7 VISITED_TILE = 3 Maze Generation Code breakdown Initialize the maze with Empty object values (Exactly same as Zekai) def init_maze(height, width): maze = [] for _ in range(height): maze_row = [MazeGameObject.EMPTY.value for _ in range(width)] maze.append(maze_row) return maze Pick a start position by randomly selecting a location in the maze that does not lie on the edge. (Exactly same as Zekai) from random import random def get_start_pos(row, col): start_row, start_col = int(random() * (row-2))+1, int(random() * (col-2))+1 return start_row, start_col Function fills the empty cells with wall value (Exactly same as Zekai) def fill_walls(maze) for i, _ in enumerate(maze): for j in range(len(maze[0])): if maze[i][j] == MazeGameObject.EMPTY.value: maze[i][j] = MazeGameObject.WALL.value To determine the number of paths surrounding a given cell in the maze, we examine the adjacent cells using if statements. If the cells are within the grid\u0026rsquo;s boundaries and have the same value as the path, the s_cell_count is incremented. def get_surrounding_cell_count(cell, maze): s_cell_count = 0 if (cell[0] \u0026gt; 0 and maze[cell[0] - 1][cell[1]] == MazeGameObject.PATH.value): s_cell_count += 1 if (cell[0] \u0026lt; len(maze) - 1 and maze[cell[0] + 1][cell[1]] == MazeGameObject.PATH.value): s_cell_count += 1 if (cell[1] \u0026gt; 0 and maze[cell[0]][cell[1] - 1] == MazeGameObject.PATH.value): s_cell_count += 1 if (cell[1] \u0026lt; len(maze[0]) - 1 and maze[cell[0]][cell[1] + 1] == MazeGameObject.PATH.value): s_cell_count += 1 return s_cell_count To create entry and exit points for the maze after it\u0026rsquo;s generated, we break the top and bottom walls of the maze into paths that are adjacent to existing paths. This creates a long and winding path that leads from the entrance to the exit of the maze. This step is important because it ensures that there is a clear path from the entrance to the exit, and that the maze is solvable. def create_entry_exit(maze): row, col = len(maze), len(maze[0]) start_point, exit_point = (0, 0), (row - 1, col - 1) # Set entrance and exit for i in range(col): if maze[1][i] == MazeGameObject.PATH.value: maze[0][i] = MazeGameObject.PLAYER_TILE.value start_point = (0, i) break for i in range(col - 1, 0, -1): if maze[row - 2][i] == MazeGameObject.PATH.value: maze[row - 1][i] = MazeGameObject.GOAL.value exit_point = (row - 1, i) break return start_point, exit_point, maze Generation the maze\nThe first step in generating the maze is to initialize the board using the init_maze function.\nmaze = init_maze(n_row, n_col) We need to determine the starting position of the maze, which we achieve using the get_start_pos function. This function ensures that the starting position is always a path cell and returns its coordinates. We then set the start_pos variable to these coordinates.\nstart_pos = get_start_pos(maze) maze[start_pos[0]][start_pos[1]] = MazeGameObject.PATH.value We assign the surrounding cells to the start_pos to the value of a WALL. Then we add the defined walls the our queue, in my case a set named wall_list\nmaze[start_pos[0] - 1][start_pos[1]] = MazeGameObject.WALL.value maze[start_pos[0]][start_pos[1] - 1] = MazeGameObject.WALL.value maze[start_pos[0]][start_pos[1] + 1] = MazeGameObject.WALL.value maze[start_pos[0] + 1][start_pos[1]] = MazeGameObject.WALL.value wall_list = set() wall_list.add((start_pos[0] - 1, start_pos[1])) wall_list.add((start_pos[0], start_pos[1] - 1)) wall_list.add((start_pos[0], start_pos[1] + 1)) wall_list.add((start_pos[0] + 1, start_pos[1])) After the initialization steps, the maze generation algorithm repeats the following steps until all the walls in the maze have been processed:\nPick a random wall from the wall_list. Count the number of surrounding cells of the wall that are paths using the get_surrounding_cell_count function. If the count is greater than 1, remove the wall from the wall_list since it has been processed. If the count is 1, we process the wall and remove the wall from the wall_list. We continue this process until the wall_list is empty. After all the cells are processed, we fill the remaining cells with walls using the fill_walls function.\nFinally, we create an entry and exit in the maze using the create_entry_exit function.\nfrom random import choices while wall_list: rand_wall = choices(list(wall_list), k=1)[0] s_cell_count = get_surrounding_cell_count(rand_wall, maze) if s_cell_count \u0026lt; 2: ### Wall Processing block wall_list.remove(rand_wall) fill_walls(maze) entry_point, exit_point, maze = create_entry_exit(maze) return entry_point, exit_point, maze The \u0026ldquo;Row case\u0026rdquo; and \u0026ldquo;Col case\u0026rdquo; refer to the two possibilities for which direction the wall being processed is oriented: either horizontally (a \u0026ldquo;row\u0026rdquo;) or vertically (a \u0026ldquo;column\u0026rdquo;).\nFor each of these cases, there are two sub-cases, based on whether the wall is at the edge of the grid or not. If the wall being processed is not at the edge of the grid, the code checks the cells on either side of the wall to see if one of them is a path and the other empty (i.e. possible connected). If so, the wall is removed from the wall list, meaning it is no longer available to be broken down. If the wall being processed is at the edge of the grid, the code only checks the cells on the side that is not at the edge. This is because the cells on the other side are already known to be walls, since they lie outside the bounds of the grid. Row Cases: Case 1: Case 2: Path Empty | | Wall Wall | | Empty Path Col Cases: Case 1: Path - Wall - Empty Case 2: Empty - Wall - Path if (rand_wall[0] \u0026gt; 0 and rand_wall[0] + 1 \u0026lt; n_row): # row case if (maze[rand_wall[0] - 1][rand_wall[1]] == MazeGameObject.WALL.value and maze[rand_wall[0] + 1][rand_wall[1]] == MazeGameObject.PATH.value): # Case 2 maze[rand_wall[0]][rand_wall[1]] = MazeGameObject.PATH.value maze[rand_wall[0] - 1][rand_wall[1]] = MazeGameObject.WALL.value maze[rand_wall[0]][rand_wall[1] - 1] = MazeGameObject.WALL.value maze[rand_wall[0]][rand_wall[1] + 1] = MazeGameObject.WALL.value wall_list.add((rand_wall[0] - 1, rand_wall[1])) wall_list.add((rand_wall[0], rand_wall[1] + 1)) wall_list.add((rand_wall[0], rand_wall[1] - 1)) if (maze[rand_wall[0] + 1][rand_wall[1]] == MazeGameObject.WALL.value and maze[rand_wall[0] + 1][rand_wall[1]] == MazeGameObject.PATH.value): # Case 1 # Similar logic as case 2 block if (rand_wall[1] \u0026gt; 0 and rand_wall[1] + 1 \u0026lt; n_col): ### similar logic as above row cases Maze Visualization Visualizing the maze requires two main functions, draw_maze and draw_tile which are defined here. The function communicates using two data classes called Tile and ScreenSize. This approach makes the visualization independent of the value of the tile and treats each tile equally. In other words, the function doesn\u0026rsquo;t need to know what the tile represents in terms of the maze structure, it only needs to know the dimensions of the tile and the screen size to properly display it on the screen. This separation of concerns makes the code easier to maintain and modify in the future, as changes to the tile value won\u0026rsquo;t affect the visualization code.\nfrom dataclasses import dataclass @dataclass class Tile: \u0026#34;\u0026#34;\u0026#34;Maze tile data object definition.\u0026#34;\u0026#34;\u0026#34; tile_color: Color border_color: Color tile_space: ScreenSize @dataclass class ScreenSize: \u0026#34;\u0026#34;\u0026#34;Screen size dataclass\u0026#34;\u0026#34;\u0026#34; width: int height: int top_left_x: int top_left_y: int In the draw_maze function, the first step is to calculate the total dimensions and define the screen size of the maze in pixels. The maze will occupy all of the space on the screen except for 50 pixels on the left and right sides, and 75 pixels on the top and 25 pixels on the bottom. Once we have the maze size in pixels, we need to compute the size of individual tiles using integer division.\nNext, we iterate through the grid and set the appropriate tile color based on the grid cell value. We calculate the tile\u0026rsquo;s top-left coordinates by multiplying the index with the tile size and adding the maze board\u0026rsquo;s top-left coordinates. Then, we call the draw_tile function to render the tile on the screen.\nboard = maze.get_board() # maze generated previously row, col = len(board), len(board[0]) maze_board_top, maze_board_left = 75, 50 maze_screen_width = self.screen_width - 100 maze_screen_height = self.screen_height - 100 tile_width, tile_height = maze_screen_width // col, maze_screen_height // row for i in range(row): for j in range(col): if board[i][j] == MazeGameObject.WALL.value: tile_color = WALL_COLOR elif board[i][j] == MazeGameObject.GOAL.value: tile_color = GOAL_COLOR elif board[i][j] == MazeGameObject.VISITED_TILE.value: tile_color = VISITED_COLOR elif board[i][j] == MazeGameObject.PLAYER_TILE.value: tile_color = PLAYER_COLOR else: tile_color = PATH_COLOR tile_space = ScreenSize(tile_width, tile_height, maze_board_left + j * tile_width, maze_board_top + i * tile_height) tile = Tile(tile_color, TILE_BORDER_COLOR, tile_space) self.draw_tile(tile) def draw_tile(self, tile): boarder_thickness = int(tile.tile_space.width * 0.1) pygame.draw.rect( self.screen, tile.tile_color, pygame.Rect(tile.tile_space.top_left_x, tile.tile_space.top_left_y, tile.tile_space.width, tile.tile_space.height), 0) if boarder_thickness \u0026gt; 0: pygame.draw.rect( self.screen, tile.border_color, pygame.Rect(tile.tile_space.top_left_x, tile.tile_space.top_left_y, tile.tile_space.width, tile.tile_space.height), boarder_thickness) Maze Animation Final Thoughts This project to build a maze game using pygame was a valuable experience for me, and I highly recommend it as a way to learn pygame and prototype game ideas. Pygame provides a great environment for individuals to develop simple and small games, and the process can be very enjoyable. I hope you found my explanation of the project informative and enjoyable.\n","permalink":"https://avashist1998.github.io/posts/maze_game/","summary":"I build maze solving game using Pygame: Check it out\nWhat Technologies I used Python (Programming Language) Pytest (Unit testing) Pygame (Visualization \u0026amp; Keyboard Events) Pygbag (Python to wasm tool for Web Distribution) Github Pages (Hosting) Github Action (CI pipeline) Github (Version Tracking) How did I build It Codebase Github Repo\nDesign The game is built using the MVC (Model-View-Controller) architecture and is based on Wesley Werner\u0026rsquo;s repository. I highly recommend checking out his repository for better understanding.","title":"Maze Game"},{"content":"I build a sorting visualization tool: Check it out\nWhat Technologies I used Github Pages (Hosting \u0026amp; Deployment) D3.js (Visualization) Javascript (UI \u0026amp; Sorting Logic) HTML (UI) CSS (Styling) How did I build It Code All of the code available on Github.\nData Object The SortData type serves as a wrapper that contains all the necessary information for visualizing the sorting algorithm.\ntype SortData = { init_index: number, value: number, color: string } Data Validation and Object Creation Helper functions The validateData function validates the user input data to ensure that it is in the correct format and can be processed. The function checks if the input string contains only numbers and commas, and returns an error message if it does not. The convertData function takes the validated input string and converts it into an array of numbers. It splits the string by commas and converts each substring into a number. It returns an error message if the conversion fails. The arrayToSortData function takes a number array and converts it into an array of SortData objects, which are used for visualization. The function assigns a init_index to each data point and sets its value, and color. function validateData(userInput) { if (userInput.length === 0) { return false } else if(!(/ ?([0-9]* ?,)/.test(userInput))){ return false } else { const data = convertData(userInput) for (let val of data) { if (val === undefined) { return false } return true } } } function convertData(userInput) { return userInput.split(\u0026#39;,\u0026#39;).map(element =\u0026gt; { return Number(element) ? Number(element) !== undefined : 0; }) } function arrayToSortData (nums: number[], color: string) { let data: SortData[] = [] nums.map( (num, index) =\u0026gt; { data.push({init_index: index, value: num, color: color} as SortData); }) return data; } Visualization D3 is a javascript visualization library build on top of Web Components. The library provides a lot of helpful components for generating different graphics. I would highly recommend you check them out for some next level interactive visualizations.\nFor the visualization, I used the rect shape to render a histogram which represents the different values provided by the users and colors are used to indicate the state of the different values. The colors of the histogram is used to communicate the transition of each step.\nColor Map Blue: Base/Unsorted Green: Sorted RED: Selected Yellow: Pointer location Tile: Pivot const svg = d3.select(\u0026#34;#\u0026#34;+ id) .append(\u0026#34;svg\u0026#34;) .attr(\u0026#34;width\u0026#34;, width) .attr(\u0026#34;height\u0026#34;, height) .attr(\u0026#34;viewBox\u0026#34;, [0, 0, width, height]) .attr(\u0026#34;style\u0026#34;, \u0026#34;max-width: 100%; height: auto; height: intrinsic;\u0026#34;); var bar = svg.append(\u0026#34;g\u0026#34;) .selectAll(\u0026#34;rect\u0026#34;+id) .data(I) .join(\u0026#34;rect\u0026#34;) .attr(\u0026#34;x\u0026#34;, i =\u0026gt; xScale(X[i])) .attr(\u0026#34;y\u0026#34;, i =\u0026gt; yScale(Y[i])) .attr(\u0026#34;height\u0026#34;, i =\u0026gt; yScale(0) - yScale(Y[i])) .attr(\u0026#34;width\u0026#34;, xScale.bandwidth()) .attr(\u0026#34;fill\u0026#34;, i =\u0026gt; data[i].color); Animation Set setInterval is used to call the sortStep with a certain amount of delay which is specified by the user.\nfunction playSort(dataObject) { if (dataObject.sorted) { return } dataObject.timer = setInterval(function() { dataObject.sortStep(dataObject); updateRender(dataObject); if (dataObject.sorted) { clearInterval(dataObject.timer); dataObject.sortedUpdateUI(); } }, dataObject.freeRunTime) } function toggleInsertPlay(dataObject) { if (!dataObject.paused) { dataObject.paused = true; clearInterval(dataObject.timer); document.getElementById(\u0026#34;nextButton\u0026#34;).className = \u0026#34;button\u0026#34;; document.getElementById(\u0026#34;playPauseButton\u0026#34;).innerHTML = \u0026#34;Play\u0026#34; document.getElementById(\u0026#34;playPauseButton\u0026#34;).className = \u0026#34;playButton\u0026#34; } else { playSort(dataObject) paused = false document.getElementById(\u0026#34;nextButton\u0026#34;).className = \u0026#34;disabled\u0026#34;; document.getElementById(\u0026#34;playPauseButton\u0026#34;).innerHTML = \u0026#34;Pause\u0026#34; document.getElementById(\u0026#34;playPauseButton\u0026#34;).className = \u0026#34;pauseButton\u0026#34; } } Final Animation Final Thoughts While I enjoyed building the sorting visualization, I realize in retrospect that I should have separated the sorting logic and visual elements for better reusability and expandability. My recommendation to fellow programmers would be to consider implementing an MVC design for visualizations. Additionally, I found D3.js to be a powerful tool for data visualization and look forward to using it again in the future. I hope you found the comparison of different sorting algorithms in the visualization to be informative and enjoyable.\n","permalink":"https://avashist1998.github.io/posts/sorting_visualization/","summary":"I build a sorting visualization tool: Check it out\nWhat Technologies I used Github Pages (Hosting \u0026amp; Deployment) D3.js (Visualization) Javascript (UI \u0026amp; Sorting Logic) HTML (UI) CSS (Styling) How did I build It Code All of the code available on Github.\nData Object The SortData type serves as a wrapper that contains all the necessary information for visualizing the sorting algorithm.\ntype SortData = { init_index: number, value: number, color: string } Data Validation and Object Creation Helper functions The validateData function validates the user input data to ensure that it is in the correct format and can be processed.","title":"Sorting Visualization"},{"content":"Viola-Jones Algorithm Implement the Viola-Jones Algorithm for rapid face detection in python from scratch. First developed a feature extraction script, which extracted 2.5 thousand features from a 19 by 19 grayscale image. I applied the feature extraction script to a 2000 image of non-faces and 500 images of faces. I implemented the AdaBoost algorithm through the python multiprocessor module, leading to a decrease in execution time by 20%. I ran 10 rounds of the algorithm to achieve an empirical error of 67% on the testing data set. Feature manipulated the cost function on the algorithm to priories false-positive, which led to a 5.4% false-positive error.\n","permalink":"https://avashist1998.github.io/posts/viola_jones_algorithm/","summary":"Viola-Jones Algorithm Implement the Viola-Jones Algorithm for rapid face detection in python from scratch. First developed a feature extraction script, which extracted 2.5 thousand features from a 19 by 19 grayscale image. I applied the feature extraction script to a 2000 image of non-faces and 500 images of faces. I implemented the AdaBoost algorithm through the python multiprocessor module, leading to a decrease in execution time by 20%. I ran 10 rounds of the algorithm to achieve an empirical error of 67% on the testing data set.","title":"Viola-Jones Algorithm"},{"content":"PPG signal Extraction Used Matlab to extract the RPG matrix for a single frame from a 720p video file with a duration of 10 to 15 seconds. The RPG matrix was converted into gray-scale single value matrix to simplify the calculation. The dimension of the gray-scale matrix was changed to focus on the area of interest to increase the computation time of the program. The gray-scale signal was extracted from the video and was studies in the frequency domain. An IIR filter was applied to the single to extract the PPG signal.\n","permalink":"https://avashist1998.github.io/posts/ppg_signal_extraction/","summary":"PPG signal Extraction Used Matlab to extract the RPG matrix for a single frame from a 720p video file with a duration of 10 to 15 seconds. The RPG matrix was converted into gray-scale single value matrix to simplify the calculation. The dimension of the gray-scale matrix was changed to focus on the area of interest to increase the computation time of the program. The gray-scale signal was extracted from the video and was studies in the frequency domain.","title":"PPG Signal Extraction"},{"content":"Core Renal Biopsy Project Worked on a team which design and prototyped a novel renal biopsy device. The device reduces bleeding from the biopsy by deploying a plug to replace the biopsy tissue. The team used a high-speed camera to understand the mechanics of the current biopsy device and effect of the process on the tissue. The team designed a CAD model of the device and used FFF(fused filament fabrication) 3D printed to prototype the device. A risk assignment was performed on the device to quantify the severity device failure and to develop appropriate experiment/testing process to ensure the quality of the device.\n","permalink":"https://avashist1998.github.io/posts/core_renal_biopsy/","summary":"Core Renal Biopsy Project Worked on a team which design and prototyped a novel renal biopsy device. The device reduces bleeding from the biopsy by deploying a plug to replace the biopsy tissue. The team used a high-speed camera to understand the mechanics of the current biopsy device and effect of the process on the tissue. The team designed a CAD model of the device and used FFF(fused filament fabrication) 3D printed to prototype the device.","title":"Core Renal biopsy Project"},{"content":" I am experienced in HTML, CSS, Java, Matlab, Python, and SolidWorks.\nI am also proficient in coding SQLite databases and create Django bases web application. I also have experience working with micro-controllers as PID for a system and to filter incoming singles. I have also developed a user interface for multiple application in iOS and Android using android studio and Xcode.\nWhat I Use Languages Python\nTypescript\nJava\nTools React/React Native\nApache Airflow\nKeras\nDocker\nGit\nWhere I have worked Argo AI, Austin, Texas February 2022 - November 2022 Software Developer\nPCS Software, Houston, Texas January 2021 - December 2021 AI/ML developer\nEngineering World Health, Kigali, Rwanda January 2021 - December 2021 Where I studies Masters of Science(Non-Thesis), Texas A\u0026amp;M University August 2019 - August 2020 Electrical Engineering - Information Science and Systems\nBachelor of Science, Texas A\u0026amp;M University August 2016 - August 2019 Biomedical Engineering - Bioinstrumentation \u0026amp; Bioimaging\n","permalink":"https://avashist1998.github.io/about/","summary":"I am experienced in HTML, CSS, Java, Matlab, Python, and SolidWorks.\nI am also proficient in coding SQLite databases and create Django bases web application. I also have experience working with micro-controllers as PID for a system and to filter incoming singles. I have also developed a user interface for multiple application in iOS and Android using android studio and Xcode.\nWhat I Use Languages Python\nTypescript\nJava\nTools React/React Native","title":"About me"}]