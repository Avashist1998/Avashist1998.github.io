[{"content":"I build a sorting visualization tool: Check it out\nWhat Technologies I used Github Pages (Hosting \u0026amp; Deployment) D3.js (Visualization) Javascript (UI \u0026amp; Sorting Logic) HTML (UI) CSS (Styling) How did I build It Code All of the code avaiable on Github.\nData Object The SortDatatype wraps all the information into a one bundle that is needed for visualization.\ntype SortData = { init_index: number, value: number, color: string } Data Validation and Object Creation Helper functions validateData (Validates user input data) convertData (Converts the input string in to array of numbers) arrayToSortData (Converts a number array to SortData array) function validateData(userInput) { if (userInput.length === 0) { return false } else if(!(/ ?([0-9]* ?,)/.test(userInput))){ return false } else { const data = convertData(userInput) for (let val of data) { if (val === undefined) { return false } return true } } } function convertData(userInput) { return userInput.split(\u0026#39;,\u0026#39;).map(element =\u0026gt; { return Number(element) ? Number(element) !== undefined : 0; }) } function arrayToSortData (nums: number[], color: string) { let data: SortData[] = [] nums.map( (num, index) =\u0026gt; { data.push({init_index: index, value: num, color: color} as SortData); }) return data; } Visulization D3 is a javascript visuliaztion libary build on top of Web Components. The libarary provides a lot of helpful components for generating different graphics. I would highly recommend you check them out for some next level interactive visualizations.\nFor my project I used the rect shape to render a histogram which represents the different values provided by the users and colors are used to indicate the state of the different values. The colors of the histogram are used to communicate the transition of each step.\nColor Map Blue: Base/Unsorted Green: Sorted RED: Selected Yellow: Pointer location Tile: Pivote const svg = d3.select(\u0026#34;#\u0026#34;+ id) .append(\u0026#34;svg\u0026#34;) .attr(\u0026#34;width\u0026#34;, width) .attr(\u0026#34;height\u0026#34;, height) .attr(\u0026#34;viewBox\u0026#34;, [0, 0, width, height]) .attr(\u0026#34;style\u0026#34;, \u0026#34;max-width: 100%; height: auto; height: intrinsic;\u0026#34;); var bar = svg.append(\u0026#34;g\u0026#34;) .selectAll(\u0026#34;rect\u0026#34;+id) .data(I) .join(\u0026#34;rect\u0026#34;) .attr(\u0026#34;x\u0026#34;, i =\u0026gt; xScale(X[i])) .attr(\u0026#34;y\u0026#34;, i =\u0026gt; yScale(Y[i])) .attr(\u0026#34;height\u0026#34;, i =\u0026gt; yScale(0) - yScale(Y[i])) .attr(\u0026#34;width\u0026#34;, xScale.bandwidth()) .attr(\u0026#34;fill\u0026#34;, i =\u0026gt; data[i].color); Animation Set setInterval is used to call the sortStep with a certain amount of delay which is specified by the user.\nfunction playSort(dataObject) { if (dataObject.sorted) { return } dataObject.timer = setInterval(function() { dataObject.sortStep(dataObject); updateRender(dataObject); if (dataObject.sorted) { clearInterval(dataObject.timer); dataObject.sortedUpdateUI(); } }, dataObject.freeRunTime) } function toggleInsertPlay(dataObject) { if (!dataObject.paused) { dataObject.paused = true; clearInterval(dataObject.timer); document.getElementById(\u0026#34;nextButton\u0026#34;).className = \u0026#34;button\u0026#34;; document.getElementById(\u0026#34;playPauseButton\u0026#34;).innerHTML = \u0026#34;Play\u0026#34; document.getElementById(\u0026#34;playPauseButton\u0026#34;).className = \u0026#34;playButton\u0026#34; } else { playSort(dataObject) paused = false document.getElementById(\u0026#34;nextButton\u0026#34;).className = \u0026#34;disabled\u0026#34;; document.getElementById(\u0026#34;playPauseButton\u0026#34;).innerHTML = \u0026#34;Pause\u0026#34; document.getElementById(\u0026#34;playPauseButton\u0026#34;).className = \u0026#34;pauseButton\u0026#34; } } Final Animation Final Thoughts I had a great time building the visualization, but looking back at the whole processes, I should have seperated the sorting logic and visual elements. I should have implemented a MVC design in the visualization, making the visualization reusable and expandable. I also mastered D3.js and will use when I can in the future. I hope you enjoyed looking at the different sorting algorithms, and comparing them.\n","permalink":"https://avashist1998.github.io/posts/sorting_visualization/","summary":"I build a sorting visualization tool: Check it out\nWhat Technologies I used Github Pages (Hosting \u0026amp; Deployment) D3.js (Visualization) Javascript (UI \u0026amp; Sorting Logic) HTML (UI) CSS (Styling) How did I build It Code All of the code avaiable on Github.\nData Object The SortDatatype wraps all the information into a one bundle that is needed for visualization.\ntype SortData = { init_index: number, value: number, color: string } Data Validation and Object Creation Helper functions validateData (Validates user input data) convertData (Converts the input string in to array of numbers) arrayToSortData (Converts a number array to SortData array) function validateData(userInput) { if (userInput.","title":"Sorting Visualization"},{"content":"Viola-Jones Algorithm Implement the Viola-Jones Algorithm for rapid face detection in python from scratch. First developed a feature extraction script, which extracted 2.5 thousand features from a 19 by 19 grayscale image. I applied the feature extraction script to a 2000 image of non-faces and 500 images of faces. I implemented the AdaBoost algorithm through the python multiprocessor module, leading to a decrease in execution time by 20%. I ran 10 rounds of the algorithm to achieve an empirical error of 67% on the testing data set. Feature manipulated the cost function on the algorithm to priories false-positive, which led to a 5.4% false-positive error.\n","permalink":"https://avashist1998.github.io/posts/viola_jones_algorithm/","summary":"Viola-Jones Algorithm Implement the Viola-Jones Algorithm for rapid face detection in python from scratch. First developed a feature extraction script, which extracted 2.5 thousand features from a 19 by 19 grayscale image. I applied the feature extraction script to a 2000 image of non-faces and 500 images of faces. I implemented the AdaBoost algorithm through the python multiprocessor module, leading to a decrease in execution time by 20%. I ran 10 rounds of the algorithm to achieve an empirical error of 67% on the testing data set.","title":"Viola-Jones Algorithm"},{"content":"PPG singal Extraction Used Matlab to extract the RPG matrix for a single frame from a 720p video file with a duration of 10 to 15 seconds. The RPG matrix was converted into grayscale single value matrix to simplify the calculation. The dimension of the grayscale matrix was changed to focus on the area of interest to increase the computation time of the program. The grayscale signal was extracted from the video and was studies in the frequency domain. An IIR filter was applied to the single to extract the PPG signal.\n","permalink":"https://avashist1998.github.io/posts/ppg_signal_extraction/","summary":"PPG singal Extraction Used Matlab to extract the RPG matrix for a single frame from a 720p video file with a duration of 10 to 15 seconds. The RPG matrix was converted into grayscale single value matrix to simplify the calculation. The dimension of the grayscale matrix was changed to focus on the area of interest to increase the computation time of the program. The grayscale signal was extracted from the video and was studies in the frequency domain.","title":"PPG Singal Extraction"},{"content":"Core Renal Biopsy Project Worked on a team which design and prototyped a novel renal biopsy device. The device reduces bleeding from the biopsy by deploying a plug to replace the biopsy tissue. The team used a high-speed camera to understand the mechanics of the current biopsy device and effect of the process on the tissue. The team designed a CAD model of the device and used FFF(fused filament fabrication) 3D printed to prototype the device. A risk assignment was performed on the device to quantify the severity device failure and to develop appropriate experiment/testing process to ensure the quality of the device.\n","permalink":"https://avashist1998.github.io/posts/core_renal_biopsy/","summary":"Core Renal Biopsy Project Worked on a team which design and prototyped a novel renal biopsy device. The device reduces bleeding from the biopsy by deploying a plug to replace the biopsy tissue. The team used a high-speed camera to understand the mechanics of the current biopsy device and effect of the process on the tissue. The team designed a CAD model of the device and used FFF(fused filament fabrication) 3D printed to prototype the device.","title":"Core Renal biopsy Project"},{"content":" I am experienced in HTML, CSS, Java, Matlab, Python, and Solidworks. I am also proficient in coding SQLite databases and create Django bases web application. I also have experience working with microcontrollers as PID for a system and to filter incoming singles. I have also developed a user interface for multiple application in iOS and Android using android studio and Xcode.\nWhat I Use Languages Python\nTypescript\nJava\nTools React/React Native\nApache Airflow\nKeras\nDocker\nGit\nWhere I have worked Argo AI, Austin, Texas Febuary 2022 - November 2022 Software Developer\nPCS Software, Houston, Texas January 2021 - December 2021 AI/ML developer\nEngineering World Health, Kigali, Rwanda January 2021 - December 2021 Where I studies Masters of Science(Non-Thesis), Texas A\u0026amp;M University August 2019 - August 2020 Electrical Engineering - Information Science and Systems\nBachelor of Science, Texas A\u0026amp;M University August 2016 - August 2019 Biomedical Engrineering - Bioinstrumentation \u0026amp; Bioimaging\n","permalink":"https://avashist1998.github.io/about/","summary":"I am experienced in HTML, CSS, Java, Matlab, Python, and Solidworks. I am also proficient in coding SQLite databases and create Django bases web application. I also have experience working with microcontrollers as PID for a system and to filter incoming singles. I have also developed a user interface for multiple application in iOS and Android using android studio and Xcode.\nWhat I Use Languages Python\nTypescript\nJava\nTools React/React Native","title":"About me"}]