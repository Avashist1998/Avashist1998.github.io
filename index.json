[{"content":"I build maze solving game using Pygame: Check it out\nWhat Technologies I used Python (Programming Language) Pytest (Unit testing) Pygame (Visualization \u0026amp; Keyboard Events) Pygbag (Python to wasm tool for Web Distribution) Github Pages (Hosting) Github Action (CI pipeline) Github (Version Tracking) How did I build It Codebase Github Repo\nDesign The game follows an MVC(Model View Controller) architecture and is based on Wesleywernerâ€™s repo. I would highly recommend checking his repo out for clarification.\nImportant Files main.py: Entry point for the game application src : Containing all of the python source code logger.py: Defines the logger of the game event.py: Defines different type of event in the game environment model.py: Defines the Game Engine of game view.py: Defines the Visual of the game maze_game: Contains the logic and maze generation code. maze_visualization: Contains helper function for game visuals test: Contains the test written for the game Maze Generation For the maze generation I used the Randomized Prim\u0026rsquo;s algorithm. The algorithm is a very popular choose when generating mazes, and I followed this article by Orestis Zekai. The article was helpful for the basic setup, but I had difficulty following along in the final parts, so I will be presenting my implementation here. Check out the file on Github for the final version.\nMaze Board Value Enum The MazeGameObject enum help with the readability of code, and creates a layer of abstraction between the values of the board and the maze generation code.\nclass MazeGameObject(Enum): PATH = 0 WALL = 1 GOAL = 2 EMPTY = -1 PLAYER_TILE = 7 VISITED_TILE = 3 Maze Generation Code breakdown Initialize the maze with Empty object values (Exactly same as Zekai) def init_maze(height, width): maze = [] for _ in range(height): maze_row = [MazeGameObject.EMPTY.value for _ in range(width)] maze.append(maze_row) return maze Pick a start position by randomly selecting a location in the maze that does not lie on the edge. (Exactly same as Zekai) from random import random def get_start_pos(row, col): start_row, start_col = int(random() * (row-2))+1, int(random() * (col-2))+1 return start_row, start_col Function fills the remains cells with wall value (Exactly same as Zekai) def fill_walls(maze) for i, _ in enumerate(maze): for j in range(len(maze[0])): if maze[i][j] == MazeGameObject.EMPTY.value: maze[i][j] = MazeGameObject.WALL.value To get the number of paths surrounding a given cell in the maze, we check the surrounding cells using if statements. If the cells inside the bounds of the grid and cell has the same value as the path, the count is incremented. def get_surrounding_cell_count(cell, maze): s_cell_count = 0 if (cell[0] \u0026gt; 0 and maze[cell[0] - 1][cell[1]] == MazeGameObject.PATH.value): s_cell_count += 1 if (cell[0] \u0026lt; len(maze) - 1 and maze[cell[0] + 1][cell[1]] == MazeGameObject.PATH.value): s_cell_count += 1 if (cell[1] \u0026gt; 0 and maze[cell[0]][cell[1] - 1] == MazeGameObject.PATH.value): s_cell_count += 1 if (cell[1] \u0026lt; len(maze[0]) - 1 and maze[cell[0]][cell[1] + 1] == MazeGameObject.PATH.value): s_cell_count += 1 return s_cell_count To create a exits and entry for the maze once the maze is generated. We break make the row and bottom row walls into paths which are adjacent to a path. This creates a long and complex path. def create_entry_exit(maze): row, col = len(maze), len(maze[0]) start_point, exit_point = (0, 0), (row - 1, col - 1) # Set entrance and exit for i in range(col): if maze[1][i] == MazeGameObject.PATH.value: maze[0][i] = MazeGameObject.PLAYER_TILE.value start_point = (0, i) break for i in range(col - 1, 0, -1): if maze[row - 2][i] == MazeGameObject.PATH.value: maze[row - 1][i] = MazeGameObject.GOAL.value exit_point = (row - 1, i) break return start_point, exit_point, maze Generation the maze The first step to generating the maze is initializing the board using init_maze function maze = init_maze(n_row, n_col) Then we define the seed position of the maze using the get_start_pos function, and set the start_pos to the value of a path cell. start_pos = get_start_pos(maze) maze[start_pos[0]][start_pos[1]] = MazeGameObject.PATH.value We assign the surrounding cells to the start_pos to the value of a WALL. maze[start_pos[0] - 1][start_pos[1]] = MazeGameObject.WALL.value maze[start_pos[0]][start_pos[1] - 1] = MazeGameObject.WALL.value maze[start_pos[0]][start_pos[1] + 1] = MazeGameObject.WALL.value maze[start_pos[0] + 1][start_pos[1]] = MazeGameObject.WALL.value Then we add the defined walls the our queue, in my case a set named wall_list wall_list = set() wall_list.add((start_pos[0] - 1, start_pos[1])) wall_list.add((start_pos[0], start_pos[1] - 1)) wall_list.add((start_pos[0], start_pos[1] + 1)) wall_list.add((start_pos[0] + 1, start_pos[1])) After which we want to repeated the following steps unit we run out of walls to process. The repetition is implemented with a while loop which runs till the wall_list is empty. We pick a wall from the list at random, then we count the total number of cells surrounding the selected wall using the get_surrounding_cell_count function. We check if there are more than one surround path to the wall, if there is we remove the wall from the list since the wall is process. Once all the cells are processed we fill the remain cells of the grid using the fill_walls function. Then we create an entry and exit in the maze using create_entry_exit function. from random import choices while wall_list: rand_wall = choices(list(wall_list), k=1)[0] s_cell_count = get_surrounding_cell_count(rand_wall, maze) if s_cell_count \u0026lt; 2: ### Wall Processing block wall_list.remove(rand_wall) fill_walls(maze) entry_point, exit_point, maze = create_entry_exit(maze) return entry_point, exit_point, maze Inside the wall processing block there is a row case and a col case, and they are checked using if statements. Inside each of the two cases we have two sub cases, as shown below. Please read the maze wiki for clerification. Row Cases: Case 1: Case 2: Path Empty | | Wall Wall | | Empty Path Col Cases: Case 1: Path - Wall - Empty Case 2: Empty - Wall - Path According to the algorithm we break the wall when it does not connect two paths. After a wall is identified that fits the condition we make the wall a path. We also make the 3 new surrounding empty cells into walls and add them to the wall_list to be processed. if (rand_wall[0] \u0026gt; 0 and rand_wall[0] + 1 \u0026lt; n_row): # row case if (maze[rand_wall[0] - 1][rand_wall[1]] == MazeGameObject.WALL.value and maze[rand_wall[0] + 1][rand_wall[1]] == MazeGameObject.PATH.value): # Case 2 maze[rand_wall[0]][rand_wall[1]] = MazeGameObject.PATH.value maze[rand_wall[0] - 1][rand_wall[1]] = MazeGameObject.WALL.value maze[rand_wall[0]][rand_wall[1] - 1] = MazeGameObject.WALL.value maze[rand_wall[0]][rand_wall[1] + 1] = MazeGameObject.WALL.value wall_list.add((rand_wall[0] - 1, rand_wall[1])) wall_list.add((rand_wall[0], rand_wall[1] + 1)) wall_list.add((rand_wall[0], rand_wall[1] - 1)) if (maze[rand_wall[0] + 1][rand_wall[1]] == MazeGameObject.WALL.value and maze[rand_wall[0] + 1][rand_wall[1]] == MazeGameObject.PATH.value): # Case 1 # Similar logic as case 2 block if (rand_wall[1] \u0026gt; 0 and rand_wall[1] + 1 \u0026lt; n_col): ### similar logic as above row cases Maze Visualization Visualizing the maze requires two main functions, draw_maze and draw_tile which are defined here. The function communicate using the two data classes called Tile and ScreenSize. This allows the visualization to be agnotic to the value of the tile, and treat each tile the same.\nfrom dataclasses import dataclass @dataclass class Tile: \u0026#34;\u0026#34;\u0026#34;Maze tile data object definition.\u0026#34;\u0026#34;\u0026#34; tile_color: Color border_color: Color tile_space: ScreenSize @dataclass class ScreenSize: \u0026#34;\u0026#34;\u0026#34;Screen size dataclass\u0026#34;\u0026#34;\u0026#34; width: int height: int top_left_x: int top_left_y: int In the draw_maze function, the first step to get the total number of dimension and define the total screen size of the maze in pixels. The maze will take up all of the space on the screen except 50 px on the right and left and 75 px and 25 px on the top and bottom respectively. Once we have the maze size in pixels we need to compute the size of the inidivials tiles using integer divisions. Then iterate throught the grid and set the appropirate tile color based on the grid cell value. After which the tile top left corredictate is computed by mutiplying the index with tile size and adding the maze board top right point corrdinates respectively. We call the draw_tile function to render the tile on the screen.\nboard = maze.get_board() # maze generated previously row, col = len(board), len(board[0]) maze_board_top, maze_board_left = 75, 50 maze_screen_width = self.screen_width - 100 maze_screen_height = self.screen_height - 100 tile_width, tile_height = maze_screen_width // col, maze_screen_height // row for i in range(row): for j in range(col): if board[i][j] == MazeGameObject.WALL.value: tile_color = WALL_COLOR elif board[i][j] == MazeGameObject.GOAL.value: tile_color = GOAL_COLOR elif board[i][j] == MazeGameObject.VISITED_TILE.value: tile_color = VISITED_COLOR elif board[i][j] == MazeGameObject.PLAYER_TILE.value: tile_color = PLAYER_COLOR else: tile_color = PATH_COLOR tile_space = ScreenSize(tile_width, tile_height, maze_board_left + j * tile_width, maze_board_top + i * tile_height) tile = Tile(tile_color, TILE_BORDER_COLOR, tile_space) self.draw_tile(tile) def draw_tile(self, tile): boarder_thickness = int(tile.tile_space.width * 0.1) pygame.draw.rect( self.screen, tile.tile_color, pygame.Rect(tile.tile_space.top_left_x, tile.tile_space.top_left_y, tile.tile_space.width, tile.tile_space.height), 0) if boarder_thickness \u0026gt; 0: pygame.draw.rect( self.screen, tile.border_color, pygame.Rect(tile.tile_space.top_left_x, tile.tile_space.top_left_y, tile.tile_space.width, tile.tile_space.height), boarder_thickness) Maze Animation Final Thoughts The maze game was a great project to learn pygame, and would recommned you to try building games using pygames. It is a great place to protype your ideas, and fantstic for indiviuals development to build something small and simple. I hope you guys enjoyed reading about my project, as much I enjoyed build the game.\n","permalink":"https://avashist1998.github.io/posts/maze_game/","summary":"I build maze solving game using Pygame: Check it out\nWhat Technologies I used Python (Programming Language) Pytest (Unit testing) Pygame (Visualization \u0026amp; Keyboard Events) Pygbag (Python to wasm tool for Web Distribution) Github Pages (Hosting) Github Action (CI pipeline) Github (Version Tracking) How did I build It Codebase Github Repo\nDesign The game follows an MVC(Model View Controller) architecture and is based on Wesleywernerâ€™s repo. I would highly recommend checking his repo out for clarification.","title":"Maze Game"},{"content":"I build a sorting visualization tool: Check it out\nWhat Technologies I used Github Pages (Hosting \u0026amp; Deployment) D3.js (Visualization) Javascript (UI \u0026amp; Sorting Logic) HTML (UI) CSS (Styling) How did I build It Code All of the code available on Github.\nData Object The SortDatatype wraps all the information into a bundle that is needed for visualization.\ntype SortData = { init_index: number, value: number, color: string } Data Validation and Object Creation Helper functions validateData (Validates user input data) convertData (Converts the input string in to array of numbers) arrayToSortData (Converts a number array to SortData array) function validateData(userInput) { if (userInput.length === 0) { return false } else if(!(/ ?([0-9]* ?,)/.test(userInput))){ return false } else { const data = convertData(userInput) for (let val of data) { if (val === undefined) { return false } return true } } } function convertData(userInput) { return userInput.split(\u0026#39;,\u0026#39;).map(element =\u0026gt; { return Number(element) ? Number(element) !== undefined : 0; }) } function arrayToSortData (nums: number[], color: string) { let data: SortData[] = [] nums.map( (num, index) =\u0026gt; { data.push({init_index: index, value: num, color: color} as SortData); }) return data; } Visualization D3 is a javascript visualization library build on top of Web Components. The library provides a lot of helpful components for generating different graphics. I would highly recommend you check them out for some next level interactive visualizations.\nFor my project I used the rect shape to render a histogram which represents the different values provided by the users and colors are used to indicate the state of the different values. The colors of the histogram is used to communicate the transition of each step.\nColor Map Blue: Base/Unsorted Green: Sorted RED: Selected Yellow: Pointer location Tile: Pivot const svg = d3.select(\u0026#34;#\u0026#34;+ id) .append(\u0026#34;svg\u0026#34;) .attr(\u0026#34;width\u0026#34;, width) .attr(\u0026#34;height\u0026#34;, height) .attr(\u0026#34;viewBox\u0026#34;, [0, 0, width, height]) .attr(\u0026#34;style\u0026#34;, \u0026#34;max-width: 100%; height: auto; height: intrinsic;\u0026#34;); var bar = svg.append(\u0026#34;g\u0026#34;) .selectAll(\u0026#34;rect\u0026#34;+id) .data(I) .join(\u0026#34;rect\u0026#34;) .attr(\u0026#34;x\u0026#34;, i =\u0026gt; xScale(X[i])) .attr(\u0026#34;y\u0026#34;, i =\u0026gt; yScale(Y[i])) .attr(\u0026#34;height\u0026#34;, i =\u0026gt; yScale(0) - yScale(Y[i])) .attr(\u0026#34;width\u0026#34;, xScale.bandwidth()) .attr(\u0026#34;fill\u0026#34;, i =\u0026gt; data[i].color); Animation Set setInterval is used to call the sortStep with a certain amount of delay which is specified by the user.\nfunction playSort(dataObject) { if (dataObject.sorted) { return } dataObject.timer = setInterval(function() { dataObject.sortStep(dataObject); updateRender(dataObject); if (dataObject.sorted) { clearInterval(dataObject.timer); dataObject.sortedUpdateUI(); } }, dataObject.freeRunTime) } function toggleInsertPlay(dataObject) { if (!dataObject.paused) { dataObject.paused = true; clearInterval(dataObject.timer); document.getElementById(\u0026#34;nextButton\u0026#34;).className = \u0026#34;button\u0026#34;; document.getElementById(\u0026#34;playPauseButton\u0026#34;).innerHTML = \u0026#34;Play\u0026#34; document.getElementById(\u0026#34;playPauseButton\u0026#34;).className = \u0026#34;playButton\u0026#34; } else { playSort(dataObject) paused = false document.getElementById(\u0026#34;nextButton\u0026#34;).className = \u0026#34;disabled\u0026#34;; document.getElementById(\u0026#34;playPauseButton\u0026#34;).innerHTML = \u0026#34;Pause\u0026#34; document.getElementById(\u0026#34;playPauseButton\u0026#34;).className = \u0026#34;pauseButton\u0026#34; } } Final Animation Final Thoughts I had a great time building the visualization, but looking back at the whole processes, I should have separated the sorting logic and visual elements. My recommendation to fellow coders would be to implement a MVC design for the visualization, making the code reusable and expandable. D3.js is a great tool for data visualization, and will use it in the future. I hope you enjoyed looking at the different sorting algorithms, and comparing them.\n","permalink":"https://avashist1998.github.io/posts/sorting_visualization/","summary":"I build a sorting visualization tool: Check it out\nWhat Technologies I used Github Pages (Hosting \u0026amp; Deployment) D3.js (Visualization) Javascript (UI \u0026amp; Sorting Logic) HTML (UI) CSS (Styling) How did I build It Code All of the code available on Github.\nData Object The SortDatatype wraps all the information into a bundle that is needed for visualization.\ntype SortData = { init_index: number, value: number, color: string } Data Validation and Object Creation Helper functions validateData (Validates user input data) convertData (Converts the input string in to array of numbers) arrayToSortData (Converts a number array to SortData array) function validateData(userInput) { if (userInput.","title":"Sorting Visualization"},{"content":"Viola-Jones Algorithm Implement the Viola-Jones Algorithm for rapid face detection in python from scratch. First developed a feature extraction script, which extracted 2.5 thousand features from a 19 by 19 grayscale image. I applied the feature extraction script to a 2000 image of non-faces and 500 images of faces. I implemented the AdaBoost algorithm through the python multiprocessor module, leading to a decrease in execution time by 20%. I ran 10 rounds of the algorithm to achieve an empirical error of 67% on the testing data set. Feature manipulated the cost function on the algorithm to priories false-positive, which led to a 5.4% false-positive error.\n","permalink":"https://avashist1998.github.io/posts/viola_jones_algorithm/","summary":"Viola-Jones Algorithm Implement the Viola-Jones Algorithm for rapid face detection in python from scratch. First developed a feature extraction script, which extracted 2.5 thousand features from a 19 by 19 grayscale image. I applied the feature extraction script to a 2000 image of non-faces and 500 images of faces. I implemented the AdaBoost algorithm through the python multiprocessor module, leading to a decrease in execution time by 20%. I ran 10 rounds of the algorithm to achieve an empirical error of 67% on the testing data set.","title":"Viola-Jones Algorithm"},{"content":"PPG signal Extraction Used Matlab to extract the RPG matrix for a single frame from a 720p video file with a duration of 10 to 15 seconds. The RPG matrix was converted into gray-scale single value matrix to simplify the calculation. The dimension of the gray-scale matrix was changed to focus on the area of interest to increase the computation time of the program. The gray-scale signal was extracted from the video and was studies in the frequency domain. An IIR filter was applied to the single to extract the PPG signal.\n","permalink":"https://avashist1998.github.io/posts/ppg_signal_extraction/","summary":"PPG signal Extraction Used Matlab to extract the RPG matrix for a single frame from a 720p video file with a duration of 10 to 15 seconds. The RPG matrix was converted into gray-scale single value matrix to simplify the calculation. The dimension of the gray-scale matrix was changed to focus on the area of interest to increase the computation time of the program. The gray-scale signal was extracted from the video and was studies in the frequency domain.","title":"PPG Signal Extraction"},{"content":"Core Renal Biopsy Project Worked on a team which design and prototyped a novel renal biopsy device. The device reduces bleeding from the biopsy by deploying a plug to replace the biopsy tissue. The team used a high-speed camera to understand the mechanics of the current biopsy device and effect of the process on the tissue. The team designed a CAD model of the device and used FFF(fused filament fabrication) 3D printed to prototype the device. A risk assignment was performed on the device to quantify the severity device failure and to develop appropriate experiment/testing process to ensure the quality of the device.\n","permalink":"https://avashist1998.github.io/posts/core_renal_biopsy/","summary":"Core Renal Biopsy Project Worked on a team which design and prototyped a novel renal biopsy device. The device reduces bleeding from the biopsy by deploying a plug to replace the biopsy tissue. The team used a high-speed camera to understand the mechanics of the current biopsy device and effect of the process on the tissue. The team designed a CAD model of the device and used FFF(fused filament fabrication) 3D printed to prototype the device.","title":"Core Renal biopsy Project"},{"content":" I am experienced in HTML, CSS, Java, Matlab, Python, and SolidWorks.\nI am also proficient in coding SQLite databases and create Django bases web application. I also have experience working with micro-controllers as PID for a system and to filter incoming singles. I have also developed a user interface for multiple application in iOS and Android using android studio and Xcode.\nWhat I Use Languages Python\nTypescript\nJava\nTools React/React Native\nApache Airflow\nKeras\nDocker\nGit\nWhere I have worked Argo AI, Austin, Texas February 2022 - November 2022 Software Developer\nPCS Software, Houston, Texas January 2021 - December 2021 AI/ML developer\nEngineering World Health, Kigali, Rwanda January 2021 - December 2021 Where I studies Masters of Science(Non-Thesis), Texas A\u0026amp;M University August 2019 - August 2020 Electrical Engineering - Information Science and Systems\nBachelor of Science, Texas A\u0026amp;M University August 2016 - August 2019 Biomedical Engineering - Bioinstrumentation \u0026amp; Bioimaging\n","permalink":"https://avashist1998.github.io/about/","summary":"I am experienced in HTML, CSS, Java, Matlab, Python, and SolidWorks.\nI am also proficient in coding SQLite databases and create Django bases web application. I also have experience working with micro-controllers as PID for a system and to filter incoming singles. I have also developed a user interface for multiple application in iOS and Android using android studio and Xcode.\nWhat I Use Languages Python\nTypescript\nJava\nTools React/React Native","title":"About me"}]